// ========================================
// CONTR√îLEUR AUTHENTIFICATION
// Fichier: backend/controleurs/authControleur.js
// ========================================

const Utilisateur = require('../modeles/Utilisateur');
const { genererToken, validerMotDePasse } = require('../config/auth');

class AuthControleur {

    /**
     * Connexion d'un utilisateur - VERSION CORRIG√âE
     * POST /api/auth/connexion
     */
    static async connexion(req, res) {
        try {
            const { nomUtilisateur, motDePasse } = req.body;

            if (!nomUtilisateur || !motDePasse) {
                return res.status(400).json({
                    succes: false,
                    message: 'Nom d\'utilisateur et mot de passe requis'
                });
            }

            console.log('üîê Tentative de connexion pour:', nomUtilisateur);

            // --- V√©rification SUPER ADMIN ---
            const superNom = process.env.SUPERADMIN_USERNAME;
            const superMdp = process.env.SUPERADMIN_PASSWORD;
            const superRole = process.env.SUPERADMIN_ROLE || 'SuperAdmin';

            console.log('üîç Variables SuperAdmin:', { superNom, superRole, hasPassword: !!superMdp });

            if (nomUtilisateur === superNom && motDePasse === superMdp) {
                console.log('‚úÖ Connexion SuperAdmin r√©ussie');
                
                const utilisateur = {
                    id_utilisateur: 'superadmin',
                    nom_utilisateur: superNom,
                    nom: 'Super',
                    prenom: 'Admin',
                    email: superNom,
                    role: superRole
                };

                const token = genererToken(utilisateur);

                return res.json({
                    succes: true,
                    message: 'Connexion super administrateur r√©ussie',
                    data: {
                        utilisateur,
                        token,
                        session: null
                    }
                });
            }

            console.log('‚ùå √âchec SuperAdmin, tentative utilisateur normal...');

            // --- Sinon : Connexion utilisateur normal ---
            const resultatAuth = await Utilisateur.authentifier(nomUtilisateur, motDePasse);

            if (!resultatAuth.succes) {
                console.log('‚ùå Authentification utilisateur √©chou√©e:', resultatAuth.message);
                return res.status(401).json({
                    succes: false,
                    message: resultatAuth.message
                });
            }

            console.log('‚úÖ Authentification utilisateur r√©ussie');

            const utilisateur = resultatAuth.utilisateur;

            const idSession = await Utilisateur.creerSession(utilisateur.id_utilisateur, {
                adresseIP: req.ip,
                userAgent: req.get('User-Agent')
            });

            const token = genererToken(utilisateur);

            await Utilisateur.enregistrerLog(
                utilisateur.id_utilisateur,
                'connexion',
                'Connexion r√©ussie',
                req.ip,
                req.get('User-Agent')
            );

            res.json({
                succes: true,
                message: 'Connexion r√©ussie',
                data: {
                    utilisateur: {
                        id: utilisateur.id_utilisateur,
                        nomUtilisateur: utilisateur.nom_utilisateur,
                        nom: utilisateur.nom,
                        prenom: utilisateur.prenom,
                        email: utilisateur.email,
                        role: utilisateur.role
                    },
                    token: token,
                    session: idSession
                }
            });

        } catch (erreur) {
            console.error('‚ùå Erreur connexion:', erreur);
            res.status(500).json({
                succes: false,
                message: 'Erreur lors de la connexion',
                erreur: erreur.message
            });
        }
    }

    /**
     * D√©connexion d'un utilisateur
     * POST /api/auth/deconnexion
     */
    static async deconnexion(req, res) {
        try {
            const idSession = req.headers['x-session-id'];

            if (idSession) {
                // Supprimer la session
                await Utilisateur.supprimerSession(idSession);

                // Enregistrer l'action de d√©connexion (sauf pour SuperAdmin)
                if (req.utilisateur && req.utilisateur.id_utilisateur !== 'superadmin') {
                    await Utilisateur.enregistrerLog(
                        req.utilisateur.id_utilisateur,
                        'deconnexion',
                        'D√©connexion manuelle',
                        req.ip,
                        req.get('User-Agent')
                    );
                }
            }

            res.json({
                succes: true,
                message: 'D√©connexion r√©ussie'
            });

        } catch (erreur) {
            console.error('Erreur d√©connexion:', erreur);
            res.status(500).json({
                succes: false,
                message: 'Erreur lors de la d√©connexion',
                erreur: erreur.message
            });
        }
    }

    /**
     * V√©rification du statut de connexion
     * GET /api/auth/statut
     */
    static async verifierStatut(req, res) {
        try {
            if (!req.utilisateur) {
                return res.status(401).json({
                    succes: false,
                    message: 'Non connect√©'
                });
            }

            // Si SuperAdmin, retourner directement
            if (req.utilisateur.id_utilisateur === 'superadmin') {
                return res.json({
                    succes: true,
                    message: 'SuperAdmin connect√©',
                    data: {
                        utilisateur: req.utilisateur
                    }
                });
            }

            // R√©cup√©rer les infos utilisateur √† jour
            const utilisateur = await Utilisateur.obtenirUtilisateurParId(req.utilisateur.id_utilisateur);

            if (!utilisateur || !utilisateur.actif) {
                return res.status(401).json({
                    succes: false,
                    message: 'Utilisateur inactif ou supprim√©'
                });
            }

            res.json({
                succes: true,
                message: 'Utilisateur connect√©',
                data: {
                    utilisateur: {
                        id: utilisateur.id_utilisateur,
                        nomUtilisateur: utilisateur.nom_utilisateur,
                        nom: utilisateur.nom,
                        prenom: utilisateur.prenom,
                        email: utilisateur.email,
                        role: utilisateur.role,
                        derniereConnexion: utilisateur.derniere_connexion
                    }
                }
            });

        } catch (erreur) {
            console.error('Erreur v√©rification statut:', erreur);
            res.status(500).json({
                succes: false,
                message: 'Erreur lors de la v√©rification du statut',
                erreur: erreur.message
            });
        }
    }

    /**
     * Changement de mot de passe
     * POST /api/auth/changer-mot-de-passe
     */
    static async changerMotDePasse(req, res) {
        try {
            const { ancienMotDePasse, nouveauMotDePasse, confirmerMotDePasse } = req.body;

            // V√©rifier l'authentification
            if (!req.utilisateur) {
                return res.status(401).json({
                    succes: false,
                    message: 'Authentification requise'
                });
            }

            // Interdire le changement de mot de passe pour SuperAdmin
            if (req.utilisateur.id_utilisateur === 'superadmin') {
                return res.status(403).json({
                    succes: false,
                    message: 'Le mot de passe SuperAdmin ne peut pas √™tre modifi√© via cette interface'
                });
            }

            // Validation des donn√©es
            if (!ancienMotDePasse || !nouveauMotDePasse || !confirmerMotDePasse) {
                return res.status(400).json({
                    succes: false,
                    message: 'Tous les champs sont requis'
                });
            }

            if (nouveauMotDePasse !== confirmerMotDePasse) {
                return res.status(400).json({
                    succes: false,
                    message: 'Les mots de passe ne correspondent pas'
                });
            }

            // Valider la force du nouveau mot de passe
            const validationMdp = validerMotDePasse(nouveauMotDePasse);
            if (!validationMdp.valide) {
                return res.status(400).json({
                    succes: false,
                    message: validationMdp.message,
                    regles: validationMdp.regles
                });
            }

            // Changer le mot de passe
            const resultat = await Utilisateur.changerMotDePasse(
                req.utilisateur.id_utilisateur,
                ancienMotDePasse,
                nouveauMotDePasse
            );

            if (!resultat.succes) {
                return res.status(400).json({
                    succes: false,
                    message: resultat.message
                });
            }

            // Enregistrer l'action
            await Utilisateur.enregistrerLog(
                req.utilisateur.id_utilisateur,
                'changement_mot_de_passe',
                'Mot de passe modifi√© avec succ√®s',
                req.ip,
                req.get('User-Agent')
            );

            res.json({
                succes: true,
                message: 'Mot de passe chang√© avec succ√®s'
            });

        } catch (erreur) {
            console.error('Erreur changement mot de passe:', erreur);
            res.status(500).json({
                succes: false,
                message: 'Erreur lors du changement de mot de passe',
                erreur: erreur.message
            });
        }
    }

    /**
     * Cr√©ation d'un nouvel utilisateur (admin seulement)
     * POST /api/auth/creer-utilisateur
     */
    static async creerUtilisateur(req, res) {
        try {
            // V√©rifier les permissions admin (SuperAdmin inclus)
            if (!req.utilisateur || (req.utilisateur.role !== 'Administrateur' && req.utilisateur.role !== 'SuperAdmin')) {
                return res.status(403).json({
                    succes: false,
                    message: 'Seuls les administrateurs peuvent cr√©er des utilisateurs'
                });
            }

            const { nomUtilisateur, motDePasse, nom, prenom, email, role } = req.body;

            // Validation des donn√©es
            if (!nomUtilisateur || !motDePasse || !nom || !role) {
                return res.status(400).json({
                    succes: false,
                    message: 'Nom d\'utilisateur, mot de passe, nom et r√¥le requis'
                });
            }

            // Valider la force du mot de passe
            const validationMdp = validerMotDePasse(motDePasse);
            if (!validationMdp.valide) {
                return res.status(400).json({
                    succes: false,
                    message: validationMdp.message,
                    regles: validationMdp.regles
                });
            }

            // Valider le r√¥le
            const rolesValides = ['Administrateur', 'Responsable Qualit√©', 'Directrice G√©n√©rale'];
            if (!rolesValides.includes(role)) {
                return res.status(400).json({
                    succes: false,
                    message: 'R√¥le invalide'
                });
            }

            const donneesUtilisateur = {
                nomUtilisateur,
                motDePasse,
                nom,
                prenom,
                email,
                role
            };

            // Cr√©er l'utilisateur
            const resultat = await Utilisateur.creerUtilisateur(donneesUtilisateur);

            // Enregistrer l'action (sauf pour SuperAdmin)
            if (req.utilisateur.id_utilisateur !== 'superadmin') {
                await Utilisateur.enregistrerLog(
                    req.utilisateur.id_utilisateur,
                    'creation_utilisateur',
                    `Utilisateur ${nomUtilisateur} cr√©√© avec le r√¥le ${role}`,
                    req.ip,
                    req.get('User-Agent')
                );
            }

            res.status(201).json({
                succes: true,
                message: 'Utilisateur cr√©√© avec succ√®s',
                data: {
                    idUtilisateur: resultat.idUtilisateur
                }
            });

        } catch (erreur) {
            console.error('Erreur cr√©ation utilisateur:', erreur);
            res.status(500).json({
                succes: false,
                message: 'Erreur lors de la cr√©ation de l\'utilisateur',
                erreur: erreur.message
            });
        }
    }

    /**
     * Liste de tous les utilisateurs (admin seulement)
     * GET /api/auth/utilisateurs
     */
    static async obtenirUtilisateurs(req, res) {
        try {
            // V√©rifier les permissions admin (SuperAdmin inclus)
            if (!req.utilisateur || (req.utilisateur.role !== 'Administrateur' && req.utilisateur.role !== 'SuperAdmin')) {
                return res.status(403).json({
                    succes: false,
                    message: 'Seuls les administrateurs peuvent voir la liste des utilisateurs'
                });
            }

            const utilisateurs = await Utilisateur.obtenirTousUtilisateurs();

            res.json({
                succes: true,
                message: 'Utilisateurs r√©cup√©r√©s avec succ√®s',
                data: utilisateurs
            });

        } catch (erreur) {
            console.error('Erreur r√©cup√©ration utilisateurs:', erreur);
            res.status(500).json({
                succes: false,
                message: 'Erreur lors de la r√©cup√©ration des utilisateurs',
                erreur: erreur.message
            });
        }
    }

    /**
     * Mise √† jour d'un utilisateur (admin seulement)
     * PUT /api/auth/utilisateurs/:id
     */
    static async mettreAJourUtilisateur(req, res) {
        try {
            const idUtilisateur = parseInt(req.params.id);

            // V√©rifier les permissions admin (SuperAdmin inclus)
            if (!req.utilisateur || (req.utilisateur.role !== 'Administrateur' && req.utilisateur.role !== 'SuperAdmin')) {
                return res.status(403).json({
                    succes: false,
                    message: 'Seuls les administrateurs peuvent modifier les utilisateurs'
                });
            }

            const donneesUtilisateur = req.body;

            // Valider le r√¥le si fourni
            if (donneesUtilisateur.role) {
                const rolesValides = ['Administrateur', 'Responsable Qualit√©', 'Directrice G√©n√©rale'];
                if (!rolesValides.includes(donneesUtilisateur.role)) {
                    return res.status(400).json({
                        succes: false,
                        message: 'R√¥le invalide'
                    });
                }
            }

            const resultat = await Utilisateur.mettreAJourUtilisateur(idUtilisateur, donneesUtilisateur);

            if (!resultat.succes) {
                return res.status(404).json(resultat);
            }

            // Enregistrer l'action (sauf pour SuperAdmin)
            if (req.utilisateur.id_utilisateur !== 'superadmin') {
                await Utilisateur.enregistrerLog(
                    req.utilisateur.id_utilisateur,
                    'modification_utilisateur',
                    `Utilisateur ID ${idUtilisateur} modifi√©`,
                    req.ip,
                    req.get('User-Agent')
                );
            }

            res.json({
                succes: true,
                message: 'Utilisateur mis √† jour avec succ√®s'
            });

        } catch (erreur) {
            console.error('Erreur mise √† jour utilisateur:', erreur);
            res.status(500).json({
                succes: false,
                message: 'Erreur lors de la mise √† jour de l\'utilisateur',
                erreur: erreur.message
            });
        }
    }

    /**
     * Nettoyage des sessions expir√©es
     * POST /api/auth/nettoyer-sessions
     */
    static async nettoyerSessions(req, res) {
        try {
            // V√©rifier les permissions admin (SuperAdmin inclus)
            if (!req.utilisateur || (req.utilisateur.role !== 'Administrateur' && req.utilisateur.role !== 'SuperAdmin')) {
                return res.status(403).json({
                    succes: false,
                    message: 'Permission insuffisante'
                });
            }

            const nombreSessionsSupprimees = await Utilisateur.nettoyerSessionsExpirees();

            res.json({
                succes: true,
                message: `${nombreSessionsSupprimees} sessions expir√©es supprim√©es`
            });

        } catch (erreur) {
            console.error('Erreur nettoyage sessions:', erreur);
            res.status(500).json({
                succes: false,
                message: 'Erreur lors du nettoyage des sessions',
                erreur: erreur.message
            });
        }
    }
}

module.exports = AuthControleur;